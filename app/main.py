from fastapi import FastAPI, File, UploadFile, HTTPException, Query
from sqlalchemy.orm import Session
from db import init_db, SessionLocal
from database import search_nearby
from model import load_model, predict_topk
import uvicorn
import tempfile
from schemas import PredictResponse, NearbyResponse

app = FastAPI(
    title="GeoCLIP API",
    description="""
GeoCLIP ‚Äî API-—Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ CLIP.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

- üìç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
- üì∑ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ
- üß™ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    """,
    openapi_tags=[
        {"name": "Prediction", "description": "–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"},
        {"name": "Search", "description": "–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏"},
        {"name": "Examples", "description": "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤"},
    ]
)


@app.on_event("startup")
def on_startup():
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init_db()


# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
model = load_model()


@app.post(
    "/predict/coords",
    response_model=PredictResponse,
    tags=["Prediction"],
    summary="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
    description="""
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-K –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏.

- **top_k**: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –æ—Ç–≤–µ—Ç–µ (–æ—Ç 1 –¥–æ 10)
- **file**: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpg/png)
"""
)
async def coords_endpoint(file: UploadFile = File(...), description="–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (.jpg/.png)",
                          top_k: int = Query(1, ge=1, le=10,
                                             description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (top-K)")):
    contents = await file.read()
    try:
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –ø—É—Ç—å –≤ predict_topk
        with tempfile.NamedTemporaryFile(suffix=".jpg", delete=True) as tmp:
            tmp.write(contents)
            tmp.flush()

            coords, probs = predict_topk(model, tmp.name, top_k=top_k)

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å—ë ‚Äî Python float
        response = [
            {"lat": float(lat), "lon": float(lon), "prob": float(p)}
            for (lat, lon), p in zip(coords, probs)
        ]
        return {"predictions": response}

    except Exception as e:
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get(
    "/health",
    tags=["Examples"],
    summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
    description="–ü—Ä–æ—Å—Ç–æ–π health-check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤–æ–π."
)
def health():
    return {"status": "ok"}


@app.post(
    "/search/nearby",
    response_model=NearbyResponse,
    tags=["Search"],
    summary="–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏",
    description="""
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.

- **radius_km**: —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
"""
)
async def nearby_endpoint(
        file: UploadFile = File(...),
        radius_km: float = Query(10.0, ge=0, le=10000, description="–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö")
):
    contents = await file.read()
    try:
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        with tempfile.NamedTemporaryFile(suffix=".jpg", delete=True) as tmp:
            tmp.write(contents)
            tmp.flush()

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä (lat, lon)
            coords, _ = predict_topk(model, tmp.name, top_k=1)
            center = coords[0]

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∫ –ë–î
        db: Session = SessionLocal()
        matches = search_nearby(center, radius_km, db)
        db.close()

        return {
            "center": {"lat": float(center[0]), "lon": float(center[1])},
            "matches": matches
        }
    except Exception:
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get(
    "/examples/nearby",
    response_model=NearbyResponse,
    tags=["Examples"],
    summary="–ü—Ä–∏–º–µ—Ä: –ü–æ–∏—Å–∫ –∏–∑ –±–∞–∑—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º",
    description="""
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (lat, lon) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã.

- **lat**: —à–∏—Ä–æ—Ç–∞ [-90, 90]
- **lon**: –¥–æ–ª–≥–æ—Ç–∞ [-180, 180]
- **radius_km**: —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
"""
)
async def examples_nearby(
        lat: float = Query(..., ge=-90.0, le=90.0, description="–®–∏—Ä–æ—Ç–∞ [-90, 90]"),
        lon: float = Query(..., ge=-180.0, le=180.0, description="–î–æ–ª–≥–æ—Ç–∞ [-180, 180]"),
        radius_km: float = Query(10.0, ge=0, le=10000, description="–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (0‚Äì10000 –∫–º)")
):
    try:
        center = (lat, lon)
        db: Session = SessionLocal()
        matches = search_nearby(center, radius_km, db)
        db.close()
        return {
            "center": {"lat": lat, "lon": lon},
            "matches": matches
        }
    except Exception:
        raise HTTPException(status_code=500, detail="Internal server error")


if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000)
